/* ServerPicker auto-generated by npm run generator */
import { Theme } from "@material-ui/core"
import { makeStyles, CSSProperties } from "@material-ui/styles"
import { observer } from "mobx-react"
import clsx from "clsx"
import React from "react"
import Store from "store/Store"
import { useRootClasses } from "style"
import { SERVER } from "store/modules/DistributedLock"
import { $enum } from "ts-enum-util"
import Btn from "components/atoms/Btn"

interface ServerPickerProps {
    className?: string
    style?: CSSProperties
    children?: React.ReactNode
}

const useStyles = makeStyles((theme: Theme) => ({
    serverPickerOrganism: {}
}))

const ServerVals = $enum(SERVER).getValues()

const ServerPicker: React.FC<ServerPickerProps> = props => {
    const classes = useStyles()
    const rc = useRootClasses()
    const className = clsx(classes.serverPickerOrganism, props.className, rc.column)

    const rows = ServerVals.map((server, idx) => {
        return (
            <Btn
                key={idx}
                variant={server === Store.distributedLock.state.server ? "contained" : "outlined"}
                onClick={() => Store.distributedLock.actions.setServer(server)}
            >
                {server}
            </Btn>
        )
    })

    return (
        <div className={className} style={props.style}>
            <h5>Choose a Server:</h5>
            {rows}
        </div>
    )
}

export default observer(ServerPicker)
